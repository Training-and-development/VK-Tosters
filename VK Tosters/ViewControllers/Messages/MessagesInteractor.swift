//
//  MessagesInteractor.swift
//  VK Tosters
//
//  Created programmist_np on 30/01/2020.
//  Copyright © 2020 programmist_np. All rights reserved.
//
//  Template generated by Juanpe Catalán @JuanpeCMiOS
//

import UIKit
import SwiftyVK
import SwiftyJSON

class MessagesInteractor: MessagesInteractorProtocol {
    weak var presenter: MessagesPresenterProtocol?
    var responseJSON: JSON = []
    var usersJSON: [JSON] = []
    var myUserJSON: JSON = JSON()
    var conversationsJSON: [JSON] = []
    var lastMessageJSON: [JSON] = []
    static var userModel: User = User()
    var conversationsModels: Conversation!
    var lastMessageModels: LastMessage!
    
    func start() {
        presenter?.onEvent(message: "Загрузка сообщений...", .default)
        getConversations()
    }
    
    func getConversations() {
        VK.API.Messages.getConversations([.filter: "all", .count: "200", .extended: "1"])
        .configure(with: Config.init(httpMethod: .GET, language: Language(rawValue: "ru")))
        .onSuccess { response in
            self.responseJSON = JSON(response)
            let firstParse = self.responseJSON["items"].arrayValue
            let conversations = firstParse.map { Conversation(JSON: $0) }
            var userIds: [String] = []
            for conversation in conversations {
                userIds.append("\(conversation.peer.localId)")
            }
            let userIdsString = userIds.joined(separator:",")
            self.getMe()
            self.getUsers(userIds: userIdsString)
            self.handleResponseMessages(response: self.responseJSON)
        }
        .onError { error in
            DispatchQueue.main.async {
                autoreleasepool {
                    // self.handleResponseMessages(response: nil)
                }
            }
        }
        .send()
    }
    
    func getUsers(userIds: String) {
        VK.API.Users.get([.userIDs: userIds, .fields: "photo_100"])
            .configure(with: Config.init(httpMethod: .GET, language: Language(rawValue: "ru")))
            .onSuccess { response in
                let responseJSON = JSON(response)
                self.handleResponseUsers(response: responseJSON)
        }
        .onError { error in
            
        }
        .send()
    }
    
    func getMe() {
        VK.API.Users.get([.fields: "photo_100"])
            .configure(with: Config.init(httpMethod: .GET, language: Language(rawValue: "ru")))
            .onSuccess { response in
                let responseJSON = JSON(response)
                self.handleResponseMyUser(response: responseJSON)
        }
        .onError { error in
            
        }
        .send()
    }
    
    func handleResponseMessages(response: JSON) {
        conversationsJSON = response["items"].arrayValue
    }
    
    func handleResponseUsers(response: JSON) {
        usersJSON = response.arrayValue
        DispatchQueue.main.async {
            self.presenter?.onLoaded()
        }
    }
    
    func handleResponseMyUser(response: JSON) {
        myUserJSON = response
        print("myUserJSON", myUserJSON)
    }
}
