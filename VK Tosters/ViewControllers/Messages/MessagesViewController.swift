//
//  MessagesViewController.swift
//  VK Tosters
//
//  Created programmist_np on 30/01/2020.
//  Copyright © 2020 programmist_np. All rights reserved.
//
//  Template generated by Juanpe Catalán @JuanpeCMiOS
//

import UIKit
import RealmSwift

class MessagesViewController: BaseViewController, MessagesViewProtocol {
    @IBOutlet weak var item: UITabBarItem!
    var notificationToken: NotificationToken?
	var presenter: MessagesPresenterProtocol?
    let realm = try! Realm()
    
    deinit{
        notificationToken?.invalidate()
    }

	override func viewDidLoad() {
        super.viewDidLoad()
        MessagesRouter.createModule(viewController: self)
        presenter?.start()
        //NotificationCenter.default.addObserver(self, selector: #selector(didReceiveReloadNotification), name: NSNotification.Name(rawValue: "RELOAD_NOTIFICATION"), object: nil)
        setup()
    }
    
    /*@objc func didReceiveReloadNotification(_ notification: NSNotification) {
        lastMessages = lastMessages.realm!.objects(DBConversation.self)
        
        notificationToken?.invalidate()
        notificationToken = lastMessages.observe { [weak self] (changes: RealmCollectionChange) in
            guard let strongSelf = self else { return }
            guard let tableView = strongSelf.mainTable else { return }
            switch changes {
            case .initial:
                tableView.reloadData()
                break
            case .update(_, let deletions, let insertions, let modifications):
                tableView.beginUpdates()
                tableView.insertRows(at: insertions.map { IndexPath(row: $0, section: 0) }, with: .right)
                tableView.deleteRows(at: deletions.map { IndexPath(row: $0, section: 0) }, with: .right)
                tableView.reloadRows(at: modifications.map { IndexPath(row: $0, section: 0) }, with: .none)
                tableView.endUpdates()
                strongSelf.notificationToken?.invalidate()
                break
            case .error(let error):
                print("Error: \(error)")
                break
            }
        }
    }*/
    
    func updateDB() {
        
    }
    
    override func setup() {
        refreshControl.addTarget(self, action: #selector(refresh(_:)), for: UIControl.Event.valueChanged)
        mainTable.addSubview(refreshControl)
        mainTable.keyboardDismissMode = .onDrag
        mainTable.allowsMultipleSelectionDuringEditing = true
        mainTable.separatorStyle = .none
        mainTable.delegate = self
        mainTable.dataSource = self
        mainTable.register(UINib(nibName: "MessageViewCell", bundle: nil), forCellReuseIdentifier: "MessageViewCell")
        self.toolbar.title = "Сообщения"
    }
    
    override func onReachabilityStatusChanged(_ notification: Notification) {
        if let info = notification.userInfo {
            if info[ReachabilityNotificationStatusItem] != nil {
                if (SwiftReachability.sharedManager?.isReachable())! {
                    self.presenter?.start()
                }
            }
        }
    }
    
    override func updateFooter(text: String, _ state: Int) {
        super.updateFooter(text: text, state)
        self.footer.setup(text: text, state)
    }
    
    func getToast(message: String, _ style: ToastStyle) {
        self.showToast(message: message, style, duration: 1)
    }
    
    func finish() {
        DispatchQueue.main.async {
            self.mainTable.reloadData()
            self.refreshControl.endRefreshing()
            // self.updateFooter(text: "\(self.presenter?.getAllCount() ?? 0) \(StringDeclension.getStringByDeclension(number: self.presenter?.getAllCount() ?? 0, arrayWords: TableViewLocalization.wallsCount))", 1)
            DispatchQueue.main.asyncAfter(deadline: .now() + 0.1, execute: {
                self.mainTable.reloadData()
                self.hideLoadingView()
            })
        }
    }
    
    func readMessage(index: IndexPath) {
        //presenter?.onTapRead(index: index)
    }
    
    @objc override func refresh(_ sender: Any) {
        presenter?.start()
    }
}
extension MessagesViewController: UITableViewDelegate, UITableViewDataSource {
    func tableView(_ tableView: UITableView, numberOfRowsInSection section: Int) -> Int {
        guard let presenter = presenter else { return 0 }
        guard let count = presenter.getMessagesCount() else { return 0 }
        return count
    }
    
    func tableView(_ tableView: UITableView, cellForRowAt indexPath: IndexPath) -> UITableViewCell {
        guard presenter != nil else { return UITableViewCell() }
        let cell = tableView.dequeueReusableCell(withIdentifier: "MessageViewCell", for: indexPath) as! MessageViewCell
        
        return cell
    }
    
    func tableView(_ tableView: UITableView, heightForRowAt indexPath: IndexPath) -> CGFloat {
        return 72
    }
    
    func tableView(_ tableView: UITableView, canEditRowAt indexPath: IndexPath) -> Bool {
        return true
    }
    
    func tableView(_ tableView: UITableView, commit editingStyle: UITableViewCell.EditingStyle, forRowAt indexPath: IndexPath) { }
    
    func tableView(_ tableView: UITableView, editActionsForRowAt indexPath: IndexPath) -> [UITableViewRowAction]? {
        let editAction: UITableViewRowAction = UITableViewRowAction(style: .normal, title: "Прочитать", handler: { (action: UITableViewRowAction ,indexPath: IndexPath ) in
            self.readMessage(index: indexPath)
        })
        editAction.backgroundColor = .toasterGreen
        return [editAction]
    }
    
    func tableView(_ tableView: UITableView, didSelectRowAt indexPath: IndexPath) {
        guard presenter != nil else { return }
        presenter!.onTapConversation(index: indexPath)
        tableView.deselectRow(at: indexPath, animated: true)
    }
}
