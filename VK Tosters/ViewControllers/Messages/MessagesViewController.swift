//
//  MessagesViewController.swift
//  VK Tosters
//
//  Created programmist_np on 30/01/2020.
//  Copyright © 2020 programmist_np. All rights reserved.
//
//  Template generated by Juanpe Catalán @JuanpeCMiOS
//

import UIKit

class MessagesViewController: BaseViewController, MessagesViewProtocol {
    @IBOutlet weak var toolbarLabel: UILabel!
    @IBOutlet weak var dividerView: UIView!
    @IBOutlet weak var messagesTableView: UITableView!
    @IBOutlet weak var item: UITabBarItem!
    
	var presenter: MessagesPresenterProtocol?
    lazy var refreshControl = UIRefreshControl()

	override func viewDidLoad() {
        super.viewDidLoad()
        MessagesRouter.createModule(viewController: self)
        presenter?.start()
        setup()
    }
    
    override func setup() {
        refreshControl.addTarget(self, action: #selector(refresh(_:)), for: UIControl.Event.valueChanged)
        messagesTableView.addSubview(refreshControl)
        messagesTableView.keyboardDismissMode = .onDrag
        messagesTableView.allowsMultipleSelectionDuringEditing = true
        messagesTableView.separatorStyle = .none
        messagesTableView.delegate = self
        messagesTableView.dataSource = self
        messagesTableView.register(UINib(nibName: "MessageViewCell", bundle: nil), forCellReuseIdentifier: "MessageViewCell")
    }

    override func setupNavigationController() {
        toolbarLabel.font = UIFont(name: "Lato-Bold", size: 20)
        toolbarLabel.textColor = .toasterBlack
        dividerView.autoSetDimension(.height, toSize: 0.5)
        dividerView.backgroundColor = .toasterMetal
    }
    
    func getToast(message: String, _ style: ToastStyle) {
        self.showToast(message: message, style, duration: 1)
    }
    
    func reload() {
        messagesTableView.reloadData()
        refreshControl.endRefreshing()
        item.badgeValue = "\(presenter!.getUnread())"
    }
    
    func readMessage(index: IndexPath) {
        presenter?.onTapRead(index: index)
    }
    
    @objc func refresh(_ sender: Any) {
        presenter?.start()
    }
}
extension MessagesViewController: UITableViewDelegate, UITableViewDataSource {
    func tableView(_ tableView: UITableView, numberOfRowsInSection section: Int) -> Int {
        guard presenter != nil else { return 0 }
        return presenter!.getMessagesCount()
    }
    
    func tableView(_ tableView: UITableView, cellForRowAt indexPath: IndexPath) -> UITableViewCell {
        guard presenter != nil else { return UITableViewCell() }
        let cell = tableView.dequeueReusableCell(withIdentifier: "MessageViewCell", for: indexPath) as! MessageViewCell
        cell.setup(
            conversation: presenter!.getConversation(indexPath: indexPath),
            lastMessage: presenter!.getLastMessage(indexPath: indexPath),
            user: presenter!.getUser(indexPath: indexPath),
            me: presenter!.getMe()
        )
        return cell
    }
    
    func tableView(_ tableView: UITableView, heightForRowAt indexPath: IndexPath) -> CGFloat {
        return 72
    }
    
    func tableView(_ tableView: UITableView, canEditRowAt indexPath: IndexPath) -> Bool {
        return true
    }
    
    func tableView(_ tableView: UITableView, commit editingStyle: UITableViewCell.EditingStyle, forRowAt indexPath: IndexPath) { }
    
    func tableView(_ tableView: UITableView, editActionsForRowAt indexPath: IndexPath) -> [UITableViewRowAction]? {
        let editAction: UITableViewRowAction = UITableViewRowAction(style: .normal, title: "Прочитать", handler: { (action: UITableViewRowAction ,indexPath: IndexPath ) in
            self.readMessage(index: indexPath)
        })
        editAction.backgroundColor = .toasterGreen
        return [editAction]
    }
    
    func tableView(_ tableView: UITableView, didSelectRowAt indexPath: IndexPath) {
        guard presenter != nil else { return }
        presenter!.onTapConversation(index: indexPath)
        tableView.deselectRow(at: indexPath, animated: true)
    }
}
