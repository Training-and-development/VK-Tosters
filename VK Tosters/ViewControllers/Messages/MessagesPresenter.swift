//
//  MessagesPresenter.swift
//  VK Tosters
//
//  Created programmist_np on 30/01/2020.
//  Copyright Â© 2020 programmist_np. All rights reserved.
//
//  Template generated by Juanpe CatalÃ¡n @JuanpeCMiOS
//

import UIKit
import SwiftyJSON

class MessagesPresenter: MessagesPresenterProtocol {

    weak private var view: MessagesViewProtocol?
    var interactor: MessagesInteractorProtocol?
    private let router: MessagesWireframeProtocol

    init(interface: MessagesViewProtocol, interactor: MessagesInteractorProtocol?, router: MessagesWireframeProtocol) {
        self.view = interface
        self.interactor = interactor
        self.router = router
    }

    func start() {
        interactor?.start()
    }
    
    func onEvent(message: String, _ style: ToastStyle) {
        view?.getToast(message: message, style)
    }
    
    func onLoaded() {
        view?.reload()
    }
    
    func onTapRead(index: IndexPath) {
        interactor?.readMessage(peerId: "\(getLastMessage(indexPath: index).peerId)")
    }
    
    func onTapConversation(index: IndexPath) {
        router.openDialog(user: getUser(indexPath: index), me: getMe())
    }
    
    func getConversation(indexPath: IndexPath) -> Conversation {
        let json = interactor?.conversationsJSON[indexPath.row]
        let conversation = json.map { Conversation(JSON: $0) }
        return conversation!
    }
    
    func getLastMessage(indexPath: IndexPath) -> LastMessage {
        let json = interactor?.conversationsJSON[indexPath.row]
        let lastMessage = json.map { LastMessage(JSON: $0) }
        return lastMessage!
    }
    
    func getUser(indexPath: IndexPath) -> User {
        let json = interactor?.usersJSON[indexPath.row]
        let user = json.map { User(messageJSON: $0) }
        return user!
    }
    
    func getMe() -> User {
        let json = interactor?.myUserJSON[0]
        let user = json.map { User(messageJSON: $0) }
        return user!
    }
    
    func getMessagesCount() -> Int {
        return interactor!.conversationsJSON.count
    }
    
    func getUnread() -> Int {
        return interactor!.unread
    }
}
