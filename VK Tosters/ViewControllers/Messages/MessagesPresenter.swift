//
//  MessagesPresenter.swift
//  VK Tosters
//
//  Created programmist_np on 30/01/2020.
//  Copyright Â© 2020 programmist_np. All rights reserved.
//
//  Template generated by Juanpe CatalÃ¡n @JuanpeCMiOS
//

import UIKit
import SwiftyJSON
import RealmSwift

class MessagesPresenter: MessagesPresenterProtocol {
    weak private var view: MessagesViewProtocol?
    var interactor: MessagesInteractorProtocol?
    private let router: MessagesWireframeProtocol
    
    let service = MessageService.shared
    
    let realm = try! Realm()

    init(interface: MessagesViewProtocol, interactor: MessagesInteractorProtocol?, router: MessagesWireframeProtocol) {
        self.view = interface
        self.interactor = interactor
        self.router = router
    }

    func start() {
        interactor?.start()
    }
    
    func isReachable() -> Bool {
        return SwiftReachability.sharedManager!.isReachable()
    }
    
    func onEvent(message: String, _ style: ToastStyle) {
        view?.getToast(message: message, style)
    }
    
    func onLoaded() {
        view?.reload()
    }
    
    func onTapRead(index: IndexPath) {
        interactor?.readMessage(peerId: "\(getFullConversation(indexPath: index).peerId)")
    }
    
    func onTapConversation(index: IndexPath) {
        let json = interactor?.usersJSON[index.row]
        guard json != nil else { return }
        let user = json.map { User(jsonFullUser: $0) }
        router.openDialog(user: user!)
    }
    
    func getFullConversation(indexPath: IndexPath) -> ConversationCore {
        guard interactor != nil else { return ConversationCore() }
        var json = interactor!.conversationsFullJSON[indexPath.row]
        json.appendIfDictionary(key: "profile", json: interactor!.usersJSON[indexPath.row])
        let conversation = ConversationCore(JSON: json)
        return conversation
    }
    
    func getRealmMessages(indexPath: IndexPath) -> DBConversation {
        return service.getDBConversation(conversation: getFullConversation(indexPath: indexPath))!
    }
    
    func getMessagesCount() -> Int {
        return interactor!.conversationsFullJSON.count
    }
    
    func getUnread() -> Int {
        return interactor!.unread
    }
}
