//
//  MessagesPresenter.swift
//  VK Tosters
//
//  Created programmist_np on 30/01/2020.
//  Copyright Â© 2020 programmist_np. All rights reserved.
//
//  Template generated by Juanpe CatalÃ¡n @JuanpeCMiOS
//

import UIKit
import SwiftyJSON
import RealmSwift

class MessagesPresenter: MessagesPresenterProtocol {
    weak private var view: MessagesViewProtocol?
    var interactor: MessagesInteractorProtocol?
    private let router: MessagesWireframeProtocol

    let realm = try! Realm()

    init(interface: MessagesViewProtocol, interactor: MessagesInteractorProtocol?, router: MessagesWireframeProtocol) {
        self.view = interface
        self.interactor = interactor
        self.router = router
    }

    func start() {
        interactor?.start()
    }
    
    func isReachable() -> Bool {
        return SwiftReachability.sharedManager!.isReachable()
    }
    
    func onError(message: String, _ style: ToastStyle) {
        DispatchQueue.main.asyncAfter(deadline: .now() + 0.2, execute: {
            self.onEvent(message: message, style)
            self.view?.hideLoadingView()
            self.view?.showErrorView(errorText: message)
        })
    }
    
    func onEvent(message: String, _ style: ToastStyle) {
        DispatchQueue.main.asyncAfter(deadline: .now() + 0.1, execute: {
            self.view?.getToast(message: message, style)
        })
    }
    
    func onLoaded() {
        view?.finish()
    }
    
    func onTapConversation(index: IndexPath) {
//        guard interactor != nil else { return }
//        let json = interactor?.interlocutorJSON[index.row]
//        guard json != nil else { return }
//        let user = json.map { User(jsonFullUser: $0) }
//        router.openDialog(user: user!)
    }
    
    func getLastMessage(index: Int) -> DBLastMessage? {
        let items = realm.objects(DBLastMessage.self)
        guard items.count != 0 else { return nil }
        return items.sorted { $0.date > $1.date }[index]
    }
    
    func getConversation(index: Int) -> DBConversation? {
        let items = realm.objects(DBConversation.self)
        guard items.count != 0 else { return nil }
        return items.sorted { $0.lastMessageId > $1.lastMessageId }[index]
    }
    
    func getProfiles() -> [DBUser]? {
        let profiles = realm.objects(DBUser.self).toArray(ofType: DBUser.self)
        guard profiles.count != 0 else { return nil }
        return profiles
    }
    
    func getGroups() -> [DBGroup]? {
        let groups = realm.objects(DBGroup.self).toArray(ofType: DBGroup.self)
        guard groups.count != 0 else { return nil }
        return groups
    }
    
    func getMessagesCount() -> Int? {
        let items = realm.objects(DBConversation.self)
        return items.count
    }
    
    func getUnread() -> Int? {
        return interactor!.unread
    }
}
