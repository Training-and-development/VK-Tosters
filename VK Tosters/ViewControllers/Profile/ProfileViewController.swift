//
//  ProfileViewController.swift
//  VK Tosters
//
//  Created programmist_np on 22/01/2020.
//  Copyright © 2020 programmist_np. All rights reserved.
//
//  Template generated by Juanpe Catalán @JuanpeCMiOS
//

import UIKit
import Kingfisher
import SwiftyJSON
import PureLayout

class ProfileViewController: BaseViewController, ProfileViewProtocol {
    @IBOutlet weak var avatarImageView: UIImageView!
    @IBOutlet weak var namesLabel: UILabel!
    @IBOutlet weak var statusLabel: UILabel!
    @IBOutlet weak var messageButton: UIButton!
    @IBOutlet weak var friendButton: UIButton!
    @IBOutlet weak var scrollView: UIScrollView!
    @IBOutlet weak var contentView: UIView!
    @IBOutlet weak var closeButton: UIButton!
    @IBOutlet weak var shortNameLabel: UILabel!
    @IBOutlet weak var dividerView: UIView!
    
    var presenter: ProfilePresenterProtocol?
    
    let errorView = ErrorView(frame: CGRect(origin: .zero, size: CGSize(width: UIScreen.main.bounds.width - 24, height: 97)))
    let loadingView = LoadingView(frame: CGRect(origin: .zero, size: CGSize(width: UIScreen.main.bounds.width - 24, height: 72)))
    
    static var userId: String = ""
    static var nameWithGenCase: String = ""
    
    var isLightImage: Bool = true
    var isHelpLight: Bool = true

	override func viewDidLoad() {
        super.viewDidLoad()
        ProfileRouter.createModule(viewController: self)
        presenter?.start(userId: ProfileViewController.userId)
        setup()
        setupError()
        setupPreloader()
    }
    
    override func showErrorView() {
        avatarImageView.isHidden = true
        namesLabel.isHidden = true
        errorView.isHidden = false
    }
    
    override func hideErrorView() {
        avatarImageView.isHidden = false
        namesLabel.isHidden = false
        errorView.isHidden = true
    }
    
    override func showLoadingView() {
        loadingView.isHidden = false
        contentView.isHidden = true
    }
    
    override func hideLoadingView() {
        loadingView.isHidden = true
        contentView.isHidden = false
    }
    
    override func onReachabilityStatusChanged(_ notification: Notification) {
        if let info = notification.userInfo {
            if info[ReachabilityNotificationStatusItem] != nil {
                if (SwiftReachability.sharedManager?.isReachable())! {
                    self.presenter?.start(userId: ProfileViewController.userId)
                }
            }
        }
    }
    
    override var preferredStatusBarStyle: UIStatusBarStyle {
        return isLightImage ? .darkContent : .lightContent
    }
    
    func setData(model: User, JSON: Data) {
        namesLabel.text = model.name
        avatarImageView.kf.setImage(with: URL(string: model.photoOriginal))
        statusLabel.text = FriendsLocalization.getLastSeen(sex: model.sex, time: model.parseTime)
        shortNameLabel.text = model.screenName
    }
    
    func setup() {
        namesLabel.font = UIFont(name: "Lato-Bold", size: 20)
        namesLabel.textColor = .toasterBlack
        avatarImageView.setRounded()
        statusLabel.font = UIFont(name: "Lato-Regular", size: 15)
        statusLabel.textColor = .toasterMetal
        messageButton.backgroundColor = .toasterBlue
        friendButton.backgroundColor = .toasterSmoke
        messageButton.titleLabel?.font = UIFont(name: "Lato-Semibold", size: 16)
        friendButton.titleLabel?.font = UIFont(name: "Lato-Semibold", size: 16)
        messageButton.setTitleColor(.toasterSmoke, for: .normal)
        friendButton.setTitleColor(.toasterBlue, for: .normal)
        messageButton.setTitle("Сообщение", for: .normal)
        friendButton.setTitle("У вас в друзьях", for: .normal)
        messageButton.setCorners(radius: 8)
        friendButton.setCorners(radius: 8)
        closeButton.imageView?.image = closeButton.currentImage?.withRenderingMode(.alwaysTemplate)
        closeButton.imageView?.tintColor = .toasterBlue
        shortNameLabel.font = UIFont(name: "Lato-Heavy", size: 22)
        shortNameLabel.textColor = .toasterBlack
        dividerView.autoSetDimension(.height, toSize: 0.5)
        dividerView.backgroundColor = .toasterMetal
    }
    
    func setupError() {
        self.view.addSubview(errorView)
        errorView.autoAlignAxis(toSuperviewAxis: .vertical)
        errorView.autoAlignAxis(toSuperviewAxis: .horizontal)
        errorView.setup()
        errorView.isHidden = true
    }
    
    func setupPreloader() {
        self.view.addSubview(loadingView)
        loadingView.autoAlignAxis(toSuperviewAxis: .vertical)
        loadingView.autoAlignAxis(toSuperviewAxis: .horizontal)
        contentView.isHidden = true
    }
    
    func getToast(message: String, _ style: ToastStyle) {
        self.showToast(message: message, style)
    }
    
    @IBAction func dismiss(_ sender: Any) {
        self.dismiss(animated: true, completion: nil)
    }
}

