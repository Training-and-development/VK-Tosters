//
//  ProfileViewController.swift
//  VK Tosters
//
//  Created programmist_np on 22/01/2020.
//  Copyright © 2020 programmist_np. All rights reserved.
//
//  Template generated by Juanpe Catalán @JuanpeCMiOS
//

import UIKit
import Kingfisher
import SwiftyJSON

class ProfileViewController: BaseViewController, ProfileViewProtocol {
    @IBOutlet weak var contentView: UIView!
    @IBOutlet weak var photoProfile: UIImageView!
    @IBOutlet weak var profileLabel: UILabel!
    @IBOutlet weak var infoView: UIView!
    @IBOutlet weak var contentTopConstraint: NSLayoutConstraint!
    @IBOutlet weak var scrollView: UIScrollView!
    @IBOutlet weak var closeButton: UIButton!
    @IBOutlet weak var jsonLabel: UILabel!
    
	var presenter: ProfilePresenterProtocol?
    
    let errorView = ErrorView(frame: CGRect(origin: .zero, size: CGSize(width: UIScreen.main.bounds.width - 24, height: 97)))
    let loadingView = LoadingView(frame: CGRect(origin: .zero, size: CGSize(width: UIScreen.main.bounds.width - 24, height: 72)))
    
    static var userId: String = ""
    static var nameWithGenCase: String = ""
    
    var isLightImage: Bool = true
    var isHelpLight: Bool = true

	override func viewDidLoad() {
        super.viewDidLoad()
        ProfileRouter.createModule(viewController: self)
        presenter?.start(userId: ProfileViewController.userId)
        setup()
        setupError()
        setupPreloader()
    }
    
    override func showErrorView() {
        photoProfile.isHidden = true
        profileLabel.isHidden = true
        errorView.isHidden = false
    }
    
    override func hideErrorView() {
        photoProfile.isHidden = false
        profileLabel.isHidden = false
        errorView.isHidden = true
    }
    
    override func showLoadingView() {
        loadingView.isHidden = false
        contentView.isHidden = true
    }
    
    override func hideLoadingView() {
        loadingView.isHidden = true
        contentView.isHidden = false
    }
    
    override func onReachabilityStatusChanged(_ notification: Notification) {
        if let info = notification.userInfo {
            if info[ReachabilityNotificationStatusItem] != nil {
                if (SwiftReachability.sharedManager?.isReachable())! {
                    self.presenter?.start(userId: ProfileViewController.userId)
                }
            }
        }
    }
    
    override var preferredStatusBarStyle: UIStatusBarStyle {
        return isLightImage ? .darkContent : .lightContent
    }
    
    func statusBarHeight() -> CGFloat {
        let height: CGFloat = UIApplication.shared.statusBarFrame.height
        return height
    }
    
    func setData(model: User, JSON: Data) {
        photoProfile.kf.setImage(with: URL(string: model.photoOriginal)) { result in
            switch result {
            case .success:
                if (self.photoProfile.image?.averageColor?.isLight())! {
                    self.isLightImage = true
                    self.isHelpLight = true
                    self.closeButton.imageView?.tintColor = Colors.shared.black
                    self.profileLabel.textColor = Colors.shared.black
                    
                } else {
                    self.isLightImage = false
                    self.isHelpLight = false
                    self.closeButton.imageView?.tintColor = Colors.shared.smoke
                    self.profileLabel.textColor = Colors.shared.smoke
                }
                self.jsonLabel.text = String(data: JSON, encoding: String.Encoding.utf8)
                self.setNeedsStatusBarAppearanceUpdate()
                self.profileLabel.text = "\(model.name) · \(model.online == 0 ? FriendsLocalization.getLastSeen(sex: model.sex, time: model.parseTime) : "Онлайн")"

            case .failure(let error):
                print(error)
            }
        }
    }
    
    static func stringify(json: Any, prettyPrinted: Bool = false) -> String {
        var options: JSONSerialization.WritingOptions = []
        if prettyPrinted {
          options = JSONSerialization.WritingOptions.prettyPrinted
        }

        do {
          let data = try JSONSerialization.data(withJSONObject: json, options: options)
          if let string = String(data: data, encoding: String.Encoding.utf8) {
            return string
          }
        } catch {
          print(error)
        }

        return ""
    }
    
    func setup() {
        self.closeButton.setImage(closeButton.currentImage?.withRenderingMode(.alwaysTemplate), for: .normal)
        scrollView.contentInset.top = -self.statusBarHeight()
        scrollView.delegate = self
        infoView.blurry()
        profileLabel.font = UIFont(name: "Lato-Semibold", size: 15)
    }
    
    func setupError() {
        self.view.addSubview(errorView)
        errorView.autoAlignAxis(toSuperviewAxis: .vertical)
        errorView.autoAlignAxis(toSuperviewAxis: .horizontal)
        errorView.setup()
        errorView.isHidden = true
    }
    
    func setupPreloader() {
        self.view.addSubview(loadingView)
        loadingView.autoAlignAxis(toSuperviewAxis: .vertical)
        loadingView.autoAlignAxis(toSuperviewAxis: .horizontal)
        contentView.isHidden = true
    }
    
    func getToast(message: String, _ style: ToastStyle) {
        self.showToast(message: message, style)
    }
    
    @IBAction func dismiss(_ sender: Any) {
        self.dismiss(animated: true, completion: nil)
    }
}
extension ProfileViewController: UIScrollViewDelegate {
    func scrollViewDidScroll(_ scrollView: UIScrollView) {
        if scrollView.contentOffset.y > self.photoProfile.bounds.size.height {
            DispatchQueue.main.async {
                self.animateConstraint(constant: -self.statusBarHeight(), isLight: true)
            }
        } else if scrollView.contentOffset.y < self.photoProfile.bounds.size.height {
            DispatchQueue.main.async {
                self.animateConstraint(constant: self.statusBarHeight(), isLight: self.isHelpLight)
            }
        }
    }
    
    func animateConstraint(constant: CGFloat, isLight: Bool) {
        contentTopConstraint.constant = constant
        UIView.animate(withDuration: 0.2, delay: 0, options: .curveEaseOut, animations: {
            self.isLightImage = isLight
            self.setNeedsStatusBarAppearanceUpdate()
            self.view.layoutIfNeeded()
        })
    }
}

