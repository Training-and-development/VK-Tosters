//
//  ProfileViewController.swift
//  VK Tosters
//
//  Created programmist_np on 22/01/2020.
//  Copyright © 2020 programmist_np. All rights reserved.
//
//  Template generated by Juanpe Catalán @JuanpeCMiOS
//

import UIKit
import Kingfisher
import SwiftyJSON
import PureLayout

class ProfileViewController: BaseViewController, ProfileViewProtocol {
    @IBOutlet weak var avatarImageView: UIImageView!
    @IBOutlet weak var namesLabel: UILabel!
    @IBOutlet weak var statusLabel: UILabel!
    @IBOutlet weak var messageButton: UIButton!
    @IBOutlet weak var friendButton: UIButton!
    @IBOutlet weak var editProfileButton: UIButton!
    @IBOutlet weak var scrollView: UIScrollView!
    @IBOutlet weak var contentView: UIView!
    @IBOutlet weak var closeButton: UIButton!
    @IBOutlet weak var shortNameLabel: UILabel!
    @IBOutlet weak var dividerView: UIView!
    @IBOutlet weak var toolbarView: UIView!
    /// ---- Info ----
    @IBOutlet weak var accountIcon: UIImageView!
    @IBOutlet weak var carrierIcon: UIImageView!
    @IBOutlet weak var followersIcon: UIImageView!
    @IBOutlet weak var infoIcon: UIImageView!
    @IBOutlet weak var accountLabel: UILabel!
    @IBOutlet weak var carrierLabel: UILabel!
    @IBOutlet weak var followersLabel: UILabel!
    @IBOutlet weak var infoLabel: UILabel!
    @IBOutlet weak var friendsView: UIView!
    @IBOutlet weak var infoView: UIView!
    @IBOutlet weak var divider2: UIView!
    /// ---- Collection photos ----
    @IBOutlet weak var mainCollection: UICollectionView!
    @IBOutlet weak var collectionHeight: NSLayoutConstraint!
    
    var presenter: ProfilePresenterProtocol?
    let defaults = UserDefaults.standard
    
    let errorView = ErrorView(frame: CGRect(origin: .zero, size: CGSize(width: UIScreen.main.bounds.width - 24, height: 97)))
    let loadingView = LoadingView(frame: CGRect(origin: .zero, size: CGSize(width: UIScreen.main.bounds.width - 24, height: 72)))
    
    static var userId: String = ""
    var previewUserId: String = ""
    static var nameWithGenCase: String = ""
    
    var isPreview: Bool = false
    
    var model: User?
    
    lazy var refreshControl = UIRefreshControl()

	override func viewDidLoad() {
        super.viewDidLoad()
        ProfileRouter.createModule(viewController: self)
        if !isPreview {
            SavedVariables.userIdsProfileViewController.append(ProfileViewController.userId)
        }
        presenter?.start(userId: !isPreview ? SavedVariables.userIdsProfileViewController.last ?? "" : previewUserId)
        setupDismissTarget()
        setupError()
        setupPreloader()
        mainCollection.isPrefetchingEnabled = false
    }
    
    override func viewDidDisappear(_ animated: Bool) {
        super.viewDidDisappear(animated)
        if isMovingFromParent {
            guard SavedVariables.userIdsProfileViewController != [] else { return }
            SavedVariables.userIdsProfileViewController.removeLast()
        }
    }
    
    override func showErrorView() {
        avatarImageView.isHidden = true
        namesLabel.isHidden = true
        errorView.isHidden = false
    }
    
    override func hideErrorView() {
        avatarImageView.isHidden = false
        namesLabel.isHidden = false
        errorView.isHidden = true
    }
    
    override func showLoadingView() {
        loadingView.isHidden = false
        contentView.isHidden = true
    }
    
    override func hideLoadingView() {
        setup()
        DispatchQueue.main.asyncAfter(deadline: .now() + 0.1, execute: {
            self.loadingView.isHidden = true
            self.contentView.isHidden = false
        })
    }
    
    override func onReachabilityStatusChanged(_ notification: Notification) {
        if let info = notification.userInfo {
            if info[ReachabilityNotificationStatusItem] != nil {
                if (SwiftReachability.sharedManager?.isReachable())! {
                    self.presenter?.start(userId: ProfileViewController.userId)
                }
            }
        }
    }
    
    func setupDismissTarget() {
        closeButton.isUserInteractionEnabled = true
        let dismissTap: UITapGestureRecognizer = UITapGestureRecognizer(target: self, action: #selector(dismiss(_:)))
        dismissTap.numberOfTapsRequired = 1
        closeButton.addGestureRecognizer(dismissTap)
        
        friendsView.isUserInteractionEnabled = true
        let singleTap: UITapGestureRecognizer = UITapGestureRecognizer(target: self, action: #selector(onTapFriends(_:)))
        singleTap.numberOfTapsRequired = 1
        friendsView.addGestureRecognizer(singleTap)
    }
    
    func setData(model: User) {
        self.model = model
        namesLabel.text = model.name
        avatarImageView.kf.setImage(with: URL(string: model.photo100))
        switch model.online {
        case 0:
            statusLabel.text = "\(FriendsLocalization.getLastSeen(sex: model.sex, time: model.lastSeen.parseTime)) \(setOnlinePlatform(platform: model.lastSeen.platform))"
        case 1:
            statusLabel.text = "Онлайн \(setOnlinePlatform(platform: model.lastSeen.platform))"
        default: break
        }
        shortNameLabel.text = model.screenName
        accountLabel.text = "\(model.counters.friends) \(getStringByDeclension(number: model.counters.friends, arrayWords: ProfileLocalization.freindsString)) · \(model.counters.onlineFriends) онлайн"
        followersLabel.text = "\(model.counters.followers) \(getStringByDeclension(number: model.counters.followers, arrayWords: ProfileLocalization.followersString))"
        carrierLabel.text = "\(model.counters.pages) \(getStringByDeclension(number: model.counters.pages, arrayWords: ProfileLocalization.pagesString))"
        infoLabel.text = "Подробная информация"
        refreshControl.endRefreshing()
    }
    
    override func setup() {
        scrollView.delegate = self
        refreshControl.addTarget(self, action: #selector(refresh(_:)), for: UIControl.Event.valueChanged)
        scrollView.refreshControl = refreshControl
        mainCollection.isScrollEnabled = false
        collectionHeight.constant = (self.view.frame.size.width - 32) / 3 * 2
        mainCollection.delegate = self
        mainCollection.dataSource = self
        mainCollection.register(UINib(nibName: "PhotoViewCell", bundle: nil), forCellWithReuseIdentifier: "photoViewCell")
        namesLabel.font = UIFont(name: "Lato-Bold", size: 20)
        namesLabel.textColor = .toasterBlack
        avatarImageView.setRounded()
        statusLabel.font = UIFont(name: "Lato-Regular", size: 15)
        statusLabel.textColor = .toasterMetal
        closeButton.setImage(UIImage(named: "back")?.withRenderingMode(.alwaysTemplate), for: .normal)
        closeButton.tintColor = .toasterBlue
        shortNameLabel.font = UIFont(name: "Lato-Heavy", size: 22)
        shortNameLabel.textColor = .toasterBlack
        dividerView.autoSetDimension(.height, toSize: 0.5)
        dividerView.backgroundColor = .toasterMetal
        divider2.autoSetDimension(.height, toSize: 0.5)
        divider2.backgroundColor = .toasterMetal
        
        messageButton.isHidden = true
        friendButton.isHidden = true
        editProfileButton.isHidden = true
        
        setupInfo()
        if ProfileViewController.userId == defaults.string(forKey: "userId") {
            setupCurrentUser()
        } else { setupAnotherUser(friendStatus: (presenter?.getUser())!.friendStatus) }
    }
    
    func setupInfo() {
        accountLabel.font = UIFont(name: "Lato-Semibold", size: 15)
        carrierLabel.font = UIFont(name: "Lato-Semibold", size: 15)
        followersLabel.font = UIFont(name: "Lato-Semibold", size: 15)
        infoLabel.font = UIFont(name: "Lato-Semibold", size: 15)
        accountLabel.textColor = .toasterMetal
        carrierLabel.textColor = .toasterMetal
        followersLabel.textColor = .toasterMetal
        infoLabel.textColor = .toasterBlue
        /// ---
        accountIcon.image = UIImage(named: "account-outline")?.withRenderingMode(.alwaysTemplate)
        accountIcon.tintColor = .toasterMetal
        carrierIcon.image = UIImage(named: "card-search-outline")?.withRenderingMode(.alwaysTemplate)
        carrierIcon.tintColor = .toasterMetal
        followersIcon.image = UIImage(named: "signal-variant")?.withRenderingMode(.alwaysTemplate)
        followersIcon.tintColor = .toasterMetal
        infoIcon.image = UIImage(named: "information-outline")?.withRenderingMode(.alwaysTemplate)
        infoIcon.tintColor = .toasterBlue
    }
    
    func setupCurrentUser() {
        editProfileButton.isHidden = false
        editProfileButton.backgroundColor = .toasterSmoke
        editProfileButton.titleLabel?.font = UIFont(name: "Lato-Semibold", size: 16)
        editProfileButton.setTitleColor(.toasterBlue, for: .normal)
        editProfileButton.setTitle("Редактировать профиль", for: .normal)
        editProfileButton.setCorners(radius: 8)
    }
    
    func setupAnotherUser(friendStatus: Int) {
        messageButton.isHidden = false
        friendButton.isHidden = false
        messageButton.backgroundColor = .toasterBlue
        friendButton.backgroundColor = .toasterSmoke
        messageButton.titleLabel?.font = UIFont(name: "Lato-Semibold", size: 16)
        friendButton.titleLabel?.font = UIFont(name: "Lato-Semibold", size: 16)
        messageButton.setTitleColor(.toasterSmoke, for: .normal)
        friendButton.setTitleColor(.toasterBlue, for: .normal)
        messageButton.setTitle("Сообщение", for: .normal)
        messageButton.setCorners(radius: 8)
        friendButton.setCorners(radius: 8)
        setTitleFromButton(friendStatus: friendStatus)
    }
    
    func setTitleFromButton(friendStatus: Int) {
        switch friendStatus {
        case 0:
            friendButton.setTitle("Добавить в друзья", for: .normal)
            friendButton.backgroundColor = .toasterBlue
            friendButton.setTitleColor(.toasterSmoke, for: .normal)
        case 1:
            friendButton.setTitle("Вы отправили заявку", for: .normal)
            friendButton.backgroundColor = .toasterSmoke
            friendButton.setTitleColor(.toasterBlue, for: .normal)
        case 2:
            friendButton.setTitle("Действия с заявкой", for: .normal)
            friendButton.backgroundColor = .toasterSmoke
            friendButton.setTitleColor(.toasterBlue, for: .normal)
        case 3:
            friendButton.setTitle("У вас в друзьях", for: .normal)
            friendButton.backgroundColor = .toasterSmoke
            friendButton.setTitleColor(.toasterBlue, for: .normal)
        default: break
        }
    }
    
    func setupError() {
        self.view.addSubview(errorView)
        errorView.autoAlignAxis(toSuperviewAxis: .vertical)
        errorView.autoAlignAxis(toSuperviewAxis: .horizontal)
        errorView.setup()
        errorView.isHidden = true
    }
    
    func setupPreloader() {
        self.view.addSubview(loadingView)
        loadingView.autoAlignAxis(toSuperviewAxis: .vertical)
        loadingView.autoAlignAxis(toSuperviewAxis: .horizontal)
        contentView.isHidden = true
    }
    
    func reloadCollection() {
        mainCollection.reloadData()
    }
    
    func getToast(message: String, _ style: ToastStyle) {
        self.showToast(message: message, style)
    }
    
    @objc func dismiss(_ sender: Any) {
        self.navigationController?.popViewController(animated: true)
    }
    
    @objc func onTapFriends(_ sender: Any) {
        presenter?.onTapFriends(userId: SavedVariables.userIdsProfileViewController.last ?? "")
    }
    
    @objc func refresh(_ sender: Any) {
        presenter?.start(userId: SavedVariables.userIdsProfileViewController.last ?? "")
    }
    
    @IBAction func friendsButtonAction(_ sender: Any) {
        presenter?.onTapToFriendAction(userId: SavedVariables.userIdsProfileViewController.last ?? "", friendStatus: presenter!.getUser().friendStatus)
        presenter?.start(userId: SavedVariables.userIdsProfileViewController.last ?? "")
    }
    
    @IBAction func sendMessageAction(_ sender: Any) {
        self.getToast(message: "Отправка сообщений временно недоступна", .warning)
    }
}
extension ProfileViewController: UICollectionViewDelegate, UICollectionViewDataSource, UICollectionViewDelegateFlowLayout {
    func collectionView(_ collectionView: UICollectionView, numberOfItemsInSection section: Int) -> Int {
        guard presenter != nil else { return 1 }
        return presenter!.getPhotosCount()
    }
    
    func collectionView(_ collectionView: UICollectionView, cellForItemAt indexPath: IndexPath) -> UICollectionViewCell {
        guard presenter != nil else { return UICollectionViewCell() }
        let cell = collectionView.dequeueReusableCell(withReuseIdentifier: "photoViewCell", for: indexPath) as! PhotoViewCell
        cell.contentView.frame = cell.bounds
        cell.contentView.autoresizingMask = [.flexibleWidth, .flexibleHeight]
        cell.setup(model: presenter!.getPhoto(indexPath: indexPath), view: self.view)
        return cell
    }
    
    func collectionView(_ collectionView: UICollectionView, layout collectionViewLayout: UICollectionViewLayout, sizeForItemAt indexPath: IndexPath) -> CGSize {
        return CGSize(width: (self.view.frame.size.width - 32) / 3 - 4, height: (self.view.frame.size.width - 32) / 3 - 4)
    }
    
    func collectionView(_ collectionView: UICollectionView, layout collectionViewLayout: UICollectionViewLayout, minimumInteritemSpacingForSectionAt section: Int) -> CGFloat {
        return 4
    }
    
    func collectionView(_ collectionView: UICollectionView, layout collectionViewLayout: UICollectionViewLayout, minimumLineSpacingForSectionAt section: Int) -> CGFloat {
        return 4
    }
    
    func numberOfSections(in collectionView: UICollectionView) -> Int {
        return 1
    }
}
extension ProfileViewController: UIScrollViewDelegate {
    func scrollViewDidScroll(_ scrollView: UIScrollView) {
        print(scrollView.contentOffset)
    }
}
