//
//  FriendsViewController.swift
//  VK Tosters
//
//  Created programmist_np on 21/01/2020.
//  Copyright © 2020 programmist_np. All rights reserved.
//
//  Template generated by Juanpe Catalán @JuanpeCMiOS
//

import UIKit
import UIKit.UIGestureRecognizerSubclass

struct SavedVariables {
    static var indexPath: IndexPath?
    static var userIdsFriendsViewController: [String] = []
    static var userIdsProfileViewController: [String] = []
}

class FriendsViewController: BaseViewController, FriendsViewProtocol {
    @IBOutlet weak var dividerSegmentView: UIView!
    @IBOutlet weak var dividerSegmentHeight: NSLayoutConstraint!
    @IBOutlet weak var segmentBlur: UIView!
    @IBOutlet weak var segmentControl: UISegmentedControl!
    
    fileprivate var statusBarShouldLight = true
    static var userId: String = ""
    
    static var usersIds: [String] = []

	var presenter: FriendsPresenterProtocol?
    let searchController = UISearchController(searchResultsController: nil)
    
	override func viewDidLoad() {
        super.viewDidLoad()
        FriendsRouter.createModule(viewController: self)
        SavedVariables.userIdsFriendsViewController.append(FriendsViewController.userId)
        presenter?.start(userId: SavedVariables.userIdsFriendsViewController.last ?? "")
        configureTableView()
        setupSearch()
        setupError()
    }
    
    override func viewWillAppear(_ animated: Bool) {
        super.viewWillAppear(animated)
        searchController.hidesNavigationBarDuringPresentation = false
        registerForPreviewingIfAvailable()
    }

    override func viewDidDisappear(_ animated: Bool) {
        super.viewDidDisappear(animated)
        searchController.hidesNavigationBarDuringPresentation = false
        if isMovingFromParent {
            guard SavedVariables.userIdsFriendsViewController != [] else { return }
            SavedVariables.userIdsFriendsViewController.removeLast()
        }
    }
    
    var previewingContext: UIViewControllerPreviewing?
    
    func unregisterForPreviewing() {
        guard let context = previewingContext else {
            return
        }
        unregisterForPreviewing(withContext: context)
    }
    
    func registerForPreviewingIfAvailable() {
        unregisterForPreviewing()
        guard traitCollection.forceTouchCapability == .available, let sourceView = viewIfLoaded else {
            return
        }
        previewingContext = registerForPreviewing(with: self, sourceView: sourceView)
    }
    
    override func traitCollectionDidChange(_ previousTraitCollection: UITraitCollection?) {
        super.traitCollectionDidChange(previousTraitCollection)
        registerForPreviewingIfAvailable()
    }
    
    override func configureTableView() {
        super.configureTableView()
        showLoadingView()
        mainTable.delegate = self
        mainTable.dataSource = self
        mainTable.register(UINib(nibName: "FriendCell", bundle: nil), forCellReuseIdentifier: "FriendCell")
        self.view.addSubview(loadingContainer)
        loadingContainer.autoPinEdgesToSuperviewEdges()
    }
    
    func setupSearch() {
        searchController.searchBar.searchBarStyle = .minimal
        searchController.searchBar.setCenteredPlaceHolder()
        searchController.searchBar.delegate = self
        searchController.searchBar.placeholder = "Поиск"
        searchController.searchBar.searchTextField.font = UIFont(name: "Lato-Regular", size: 15)
        searchController.searchBar.setValue("Отмена", forKey: "cancelButtonText")
        setSearchFieldBackgroundColor(.toasterLightGray)
    }
    
    private func setSearchFieldBackgroundColor(_ searchFieldBackgroundColor: UIColor) {
        let patternSize = CGSize(width: 32, height: 32)
        
        let imagePattern = UIImage.imageWithColor(searchFieldBackgroundColor, imageSize: patternSize)
        let roundedImagePattern = imagePattern.flatMap { UIImage.roundedImage($0, cornerRadius: patternSize.height / 2) }
        
        if let roundedImagePattern = roundedImagePattern {
            searchController.searchBar.setSearchFieldBackgroundImage(roundedImagePattern, for: .normal)
        }
    }
    
    func getToast(message: String, _ style: ToastStyle) {
        self.showToast(message: message, style, duration: 1)
    }
    
    func reloadTableView() {
        DispatchQueue.main.async {
            self.mainTable.reloadData()
            self.toolbar.title = "Друзья"
            self.segmentControl.setTitle("\(self.presenter!.getFriendsCount()) \(self.getStringByDeclension(number: self.presenter!.getFriendsCount(), arrayWords: CaseLocalize.freindsString))", forSegmentAt: 0)
            self.segmentControl.setTitle("\(self.presenter!.getOnlineFriends().count) онлайн", forSegmentAt: 1)
            self.refreshControl.endRefreshing()
            // self.updateFooter(text: "\(self.presenter?.getAllCount() ?? 0) \(StringDeclension.getStringByDeclension(number: self.presenter?.getAllCount() ?? 0, arrayWords: TableViewLocalization.wallsCount))", 1)
            DispatchQueue.main.asyncAfter(deadline: .now() + 0.1, execute: {
                self.mainTable.reloadData()
                self.hideLoadingView()
            })
        }
    }
    
    func openPopup(headerText: String, descriptionText: String, confrimText: String?, declineText: String?) {
        // self.showPopup(headerText: headerText, descriptionText: descriptionText, confrimText: confrimText, declineText: declineText)
    }
    
    override func confrimAction() {
        switch segmentControl.selectedSegmentIndex {
        case 0:
            self.presenter?.onSwipeUser(indexPath: SavedVariables.indexPath!, isOnlineSegment: false, completion: nil)
        case 1:
            self.presenter?.onSwipeUser(indexPath: SavedVariables.indexPath!, isOnlineSegment: true, completion: nil)
        default:
            return
        }
    }
    
    @IBAction func back(_ sender: Any) {
        self.navigationController?.popViewController(animated: true)
    }
    
    @objc override func refresh(_ sender: Any) {
        presenter?.start(userId: SavedVariables.userIdsFriendsViewController.last ?? "")
    }
    
    @IBAction func indexChanged(_ sender: Any) {
        switch segmentControl.selectedSegmentIndex {
        default:
            reloadTableView()
        }
    }
    
    override func onReachabilityStatusChanged(_ notification: Notification) {
        if let info = notification.userInfo {
            if info[ReachabilityNotificationStatusItem] != nil {
                if (SwiftReachability.sharedManager?.isReachable())! {
                    self.presenter?.start(userId: FriendsViewController.usersIds.last ?? "")
                }
            }
        }
    }
}
extension FriendsViewController: UITableViewDelegate, UITableViewDataSource {
    func tableView(_ tableView: UITableView, numberOfRowsInSection section: Int) -> Int {
        guard presenter != nil else { return 1 }
        switch segmentControl.selectedSegmentIndex {
        case 0:
            return presenter!.getFriendsCount()
        case 1:
            return presenter!.getOnlineFriends().count
        default:
            return 0
        }
    }
    
    func tableView(_ tableView: UITableView, cellForRowAt indexPath: IndexPath) -> UITableViewCell {
        guard presenter != nil else { return UITableViewCell() }
        let cell = tableView.dequeueReusableCell(withIdentifier: "FriendCell", for: indexPath) as! FriendCell
        if traitCollection.forceTouchCapability == .available {
            registerForPreviewing(with: self, sourceView: cell)
        }
        switch segmentControl.selectedSegmentIndex {
        case 0:
            cell.setup(model: presenter!.getFriend(indexPath: indexPath))
            return cell
        case 1:
            cell.setup(model: presenter!.getOnlineFriends()[indexPath.row])
            return cell
        default:
            return UITableViewCell()
        }
    }
    
    func tableView(_ tableView: UITableView, didSelectRowAt indexPath: IndexPath) {
        guard presenter != nil else { return }
        switch segmentControl.selectedSegmentIndex {
        case 0:
            presenter?.onTapUser(indexPath: indexPath, isOnlineSegment: false)
        case 1:
            presenter?.onTapUser(indexPath: indexPath, isOnlineSegment: true)
        default:
            return
        }
        tableView.deselectRow(at: indexPath, animated: true)
    }
    
    func tableView(_ tableView: UITableView, canEditRowAt indexPath: IndexPath) -> Bool {
        guard FriendsViewController.userId == UserDefaults.standard.string(forKey: "userId") else { return false }
        return true
    }
    
    func tableView(_ tableView: UITableView, commit editingStyle: UITableViewCell.EditingStyle, forRowAt indexPath: IndexPath) { }
    
    func tableView(_ tableView: UITableView, editActionsForRowAt indexPath: IndexPath) -> [UITableViewRowAction]? {
        guard FriendsViewController.userId == UserDefaults.standard.string(forKey: "userId") else { return nil }
        let editAction: UITableViewRowAction = UITableViewRowAction(style: .normal, title: "Сообщение", handler: { (action: UITableViewRowAction ,indexPath: IndexPath ) in
            self.getToast(message: "Отправка сообщений временно недоступна", .warning)
        })
        editAction.backgroundColor = .toasterBlue
        
        let deleteAction: UITableViewRowAction = UITableViewRowAction(style: .destructive, title: "Удалить", handler: { (action: UITableViewRowAction ,indexPath: IndexPath ) in
            SavedVariables.indexPath = indexPath
            switch self.segmentControl.selectedSegmentIndex{
            case 0:
                self.presenter?.getName(nameCase: .acc, indexPath: indexPath, isOnlineSegment: false)
            case 1:
                self.presenter?.getName(nameCase: .acc, indexPath: indexPath, isOnlineSegment: true)
            default:
                return
            }
        })
        deleteAction.backgroundColor = .toasterRed
        return [deleteAction, editAction]
    }
    
    func tableView(_ tableView: UITableView, heightForRowAt indexPath: IndexPath) -> CGFloat {
        return 58
    }
}
extension FriendsViewController: UISearchBarDelegate {
    func searchBarTextDidBeginEditing(_ searchBar: UISearchBar) {
        UIView.animate(withDuration: 0.3, delay: 0, options: .curveEaseOut, animations: {
            self.searchController.searchBar.setDefaultPlaceHolder()
            self.view.layoutIfNeeded()
            searchBar.layoutIfNeeded()
        })
    }
    
    func searchBarTextDidEndEditing(_ searchBar: UISearchBar) {
        UIView.animate(withDuration: 0.3, delay: 0, options: .curveEaseOut, animations: {
            self.searchController.searchBar.setCenteredPlaceHolder()
            self.view.layoutIfNeeded()
            searchBar.layoutIfNeeded()
        })
    }
}
extension FriendsViewController: UIGestureRecognizerDelegate {
    func gestureRecognizer(_ gestureRecognizer: UIGestureRecognizer, shouldBeRequiredToFailBy otherGestureRecognizer: UIGestureRecognizer) -> Bool {
        return true
    }
}
extension FriendsViewController: UIViewControllerPreviewingDelegate {
    func previewingContext(_ previewingContext: UIViewControllerPreviewing, viewControllerForLocation location: CGPoint) -> UIViewController? {
        if let cell = previewingContext.sourceView as? UITableViewCell {
            // get the indexPath of the cell
            let indexPath = mainTable.indexPath(for: cell)!
            let storyboard = UIStoryboard.init(name: "Main", bundle: nil)
            if let profileViewController = storyboard.instantiateViewController(withIdentifier: "profileViewController") as? ProfileViewController {
                profileViewController.preferredContentSize = CGSize.init(width: UIScreen.main.bounds.width, height: UIScreen.main.bounds.height)
                switch self.segmentControl.selectedSegmentIndex {
                case 0:
                    profileViewController.isPreview = true
                    profileViewController.previewUserId = presenter!.getUserIdBy(indexPath: indexPath, isOnlineSegment: false)
                case 1:
                    profileViewController.isPreview = true
                    profileViewController.previewUserId = presenter!.getUserIdBy(indexPath: indexPath, isOnlineSegment: true)
                default:
                    profileViewController.isPreview = true
                    profileViewController.previewUserId = presenter!.getUserIdBy(indexPath: indexPath, isOnlineSegment: false)
                }
                return profileViewController
            } else {
                return nil
            }
        } else {
            return nil
        }
    }
    
    func previewingContext(_ previewingContext: UIViewControllerPreviewing, commit viewControllerToCommit: UIViewController) {
        let storyboard = UIStoryboard.init(name: "Main", bundle: nil)
        if let profileViewController = storyboard.instantiateViewController(withIdentifier: "profileViewController") as? ProfileViewController {
            profileViewController.hidesBottomBarWhenPushed = true
            profileViewController.isPreview = false
            show(profileViewController, sender: self)
        }
    }
}
