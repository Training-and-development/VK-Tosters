//
//  FriendsPresenter.swift
//  VK Tosters
//
//  Created programmist_np on 21/01/2020.
//  Copyright © 2020 programmist_np. All rights reserved.
//
//  Template generated by Juanpe Catalán @JuanpeCMiOS
//

import UIKit

struct ResponseState {
    static var isLoaded: Bool = false
}

class FriendsPresenter: FriendsPresenterProtocol {
    weak private var view: FriendsViewProtocol?
    var interactor: FriendsInteractorProtocol?
    private let router: FriendsWireframeProtocol

    init(interface: FriendsViewProtocol, interactor: FriendsInteractorProtocol?, router: FriendsWireframeProtocol) {
        self.view = interface
        self.interactor = interactor
        self.router = router
    }
    
    deinit {
        ResponseState.isLoaded = false
        print("FriendsPresenter deinited")
    }

    func start(userId: String = "") {
        interactor?.start(userId: userId)
    }
    
    func onEvent(message: String, _ style: ToastStyle) {
        view?.getToast(message: message, style)
    }
    
    func onLoadData(hasError: Bool) {
        if hasError {
            view?.showErrorView(errorText: "0")
        } else {
            view?.hideErrorView()
            view?.reloadTableView()
        }
    }
    
    func onTapUser(indexPath: IndexPath, isOnlineSegment: Bool) {
        DispatchQueue.main.async {
            if isOnlineSegment {
                self.router.openProfile(userId: self.getOnlineFriends()[indexPath.row].id)
            } else {
                self.router.openProfile(userId: self.getFriend(indexPath: indexPath).id)
            }
        }
    }
    
    func onSwipeUser(indexPath: IndexPath, isOnlineSegment: Bool, completion: DeleteFriendCompletionHandler?) {
        interactor?.deleteFriendsRequest(userId: isOnlineSegment ? self.getOnlineFriends()[indexPath.row].id : getFriend(indexPath: indexPath).id, completionHandler: { success in
            if success {
                //self.view?.getToast(message: "Вы удалили \(UserNameWithCase.name)", .success)
                completion?(true)
            } else {
                self.view?.getToast(message: "Произошла ошибка", .error)
                completion?(false)
            }
            return ()
        })
    }
    
    func onRequestSend(isLoaded: Bool) {
        if isLoaded {
            view?.hideLoadingView()
        } else {
            view?.showLoadingView()
        }
    }
    
    func getFriend(indexPath: IndexPath) -> Friend {
        let friendJSON = interactor?.friendsJSON[indexPath.row]
        let friend = friendJSON.map { Friend(json: $0) }
        return friend!
    }
    
    func getOnlineFriends() -> [Friend] {
        let onlinesUsers = getFriends().filter { $0.online == 1 }
        return onlinesUsers
    }
    
    func getFriends() -> [Friend] {
        let friend: [Friend] = (interactor?.friendsJSON.map { Friend(json: $0) })!
        return friend
    }
    
    func getFriendsCount() -> Int {
        return interactor!.friendsJSON.count
    }
    
    func getUserIdBy(indexPath row: IndexPath, isOnlineSegment: Bool) -> String {
        return isOnlineSegment ? self.getOnlineFriends()[row.row].id : getFriend(indexPath: row).id
    }
    
    func getName(nameCase: NameCases, indexPath: IndexPath, isOnlineSegment: Bool) {
        interactor?.getNameWithCase(nameCase: nameCase, userId: isOnlineSegment ? self.getOnlineFriends()[indexPath.row].id : getFriend(indexPath: indexPath).id, completionHandler: { success in
            if success {
                DispatchQueue.main.async {
                    //self.view?.openPopup(headerText: "Удаление из друзей", descriptionText: "Действительно удалить \(UserNameWithCase.name) из друзей?", confrimText: "Да", declineText: "Отмена")
                }
            } else {
                DispatchQueue.main.async {
                    self.view?.getToast(message: CommonLocalization.notConnected, .error)
                }
            }
            return ()
        })
    }
}
