//
//  FriendsInteractor.swift
//  VK Tosters
//
//  Created programmist_np on 21/01/2020.
//  Copyright © 2020 programmist_np. All rights reserved.
//
//  Template generated by Juanpe Catalán @JuanpeCMiOS
//

import Foundation
import UIKit
import SwiftyVK
import SwiftyJSON

class FriendsInteractor: FriendsInteractorProtocol {
    weak var presenter: FriendsPresenterProtocol?
    var friendsJSON: [JSON] = []
    var responseJSON: JSON = []
    
    
    func start() {
        getFriends()
    }
    
    func getFriends() {
        VK.API.Friends.get([.count: String(50), .fields: ApiFriendsFields.getFriendsField])
            .configure(with: Config.init(httpMethod: .POST, language: Language(rawValue: "ru")))
            .onSuccess { response in
                self.responseJSON = JSON(response)
                self.friendsJSON = self.responseJSON[ApiFriendsResponse.items].arrayValue
                DispatchQueue.main.async {
                    self.presenter?.onRequestSend(isLoaded: true)
                    self.presenter?.onLoadData(hasError: false)
                }
        }
        .onError { error in
            DispatchQueue.main.async {
                self.presenter?.onRequestSend(isLoaded: true)
                self.presenter?.onLoadData(hasError: true)
            }
        }
        .send()
    }
    
    func getNameWithCase(nameCase: NameCases, userId: String, completionHandler: GetUserNameHandler?) {
        VK.API.Users.get([.userId: userId, .fields: "first_name", .nameCase: String(describing: nameCase)])
            .configure(with: Config.init(httpMethod: .POST, language: Language(rawValue: "ru")))
            .onSuccess { response in
                let responseJSON = JSON(response).arrayValue
                let mapItems = responseJSON.map { User(jsonFullUser: $0) }
                UserNameWithCase.name = mapItems[0].name
                completionHandler!(true)
        }
        .onError { error in
            completionHandler!(false)
            print(String(describing: error))
        }
        .send()
    }
    
    func handleResponse(response: JSON) {
        let mapItems = self.friendsJSON.map { Friend(json: $0) }
        DispatchQueue.main.async {
            
        }
    }
    
    func deleteFriendsRequest(userId: String, completionHandler: DeleteFriendHandler?) {
        VK.API.Friends.delete([.userId: userId])
            .configure(with: Config.init(httpMethod: .GET, language: Language(rawValue: "ru")))
            .onSuccess{ _ in
                DispatchQueue.main.async {
                    self.getFriends()
                    self.presenter?.onEvent(message: "Вы удалили \(UserNameWithCase.name)", .success)
                    completionHandler!(true)
                }
        }
        .onError { _ in
            DispatchQueue.main.async {
                self.presenter?.onEvent(message: "Произошла ошибка", .error)
                completionHandler!(false)
            }
        }
        .send()
    }
}
