//
//  DialogPresenter.swift
//  VK Tosters
//
//  Created programmist_np on 01/02/2020.
//  Copyright © 2020 programmist_np. All rights reserved.
//
//  Template generated by Juanpe Catalán @JuanpeCMiOS
//

import UIKit

class DialogPresenter: DialogPresenterProtocol {
    weak private var view: DialogViewProtocol?
    var interactor: DialogInteractorProtocol?
    private let router: DialogWireframeProtocol

    init(interface: DialogViewProtocol, interactor: DialogInteractorProtocol?, router: DialogWireframeProtocol) {
        self.view = interface
        self.interactor = interactor
        self.router = router
    }

    func start(userId: String, offset: String) {
        interactor?.start(userId: userId, offset: offset)
    }
    
    func onLoaded() {
        view?.reload()
    }
    
    func onSended() {
        view?.clearTextView()
    }
    
    func onEvent(message: String, _ style: ToastStyle) {
        view?.getToast(message: message, style)
    }
    
    func onSend(message: String, peerId: String) {
        interactor?.sendMessage(message: message, peerId: peerId)
    }
    
    func getDialogMessage(indexPath: IndexPath) -> DialogMessageModel {
        let json = interactor?.dialogMessagesJSON[indexPath.row]
        let message = json.map { DialogMessageModel(json: $0) }
        return message!
    }
    
    func getMessagesCount() -> Int {
        return interactor!.dialogMessagesJSON.count
    }

    func getAllMessagesCount() -> Int {
        return interactor!.countJSON
    }
}
