//
//  DialogViewController.swift
//  VK Tosters
//
//  Created programmist_np on 01/02/2020.
//  Copyright © 2020 programmist_np. All rights reserved.
//
//  Template generated by Juanpe Catalán @JuanpeCMiOS
//

import UIKit

class DialogViewController: BaseViewController, DialogViewProtocol {
    @IBOutlet weak var messageInputView: UIView!
    @IBOutlet weak var attachImageView: UIImageView!
    @IBOutlet weak var inputField: UITextView!
    @IBOutlet weak var sendImageView: UIImageView!
    @IBOutlet weak var toolbarLabel: UILabel!
    @IBOutlet weak var dividerView: UIView!
    @IBOutlet weak var inputBottomConstraint: NSLayoutConstraint!
    @IBOutlet weak var mainTable: UITableView!
    @IBOutlet weak var closeButton: UIButton!
    @IBOutlet weak var statusLabel: UILabel!
    
	var presenter: DialogPresenterProtocol?
    let keyboardFrameTrackerView = KeyboardFrameTrackerView.init(height: 48)

    static var user: User!

	override func viewDidLoad() {
        super.viewDidLoad()
        DialogRouter.createModule(viewController: self)
        presenter?.start(userId: DialogViewController.user.id)
        setupTable()
        setupInputComponents()
        setupTapRecognizer()
    }
    
    override var canBecomeFirstResponder: Bool {
        return false
    }
    
    override func setupNavigationController() {
        navigationController?.interactivePopGestureRecognizer?.delegate = self
        navigationController?.interactivePopGestureRecognizer?.isEnabled = true
        toolbarLabel.font = UIFont(name: "Lato-Bold", size: 20)
        toolbarLabel.textColor = .toasterBlack
        dividerView.autoSetDimension(.height, toSize: 0.5)
        dividerView.backgroundColor = .toasterMetal
        closeButton.setImage(UIImage(named: "back")?.withRenderingMode(.alwaysTemplate), for: .normal)
        closeButton.tintColor = .toasterBlue
        keyboardFrameTrackerView.delegate = self
        statusLabel.font = UIFont(name: "Lato-Semibold", size: 14)
        statusLabel.textColor = .toasterMetal
        inputField.inputAccessoryView = self.keyboardFrameTrackerView
        inputField.font = UIFont(name: "Lato-Semibold", size: 17)
        inputField.textColor = .toasterBlack
        inputField.placeholder = "Сообщение"
    }
    
    override func viewDidLayoutSubviews() {
        super.viewDidLayoutSubviews()
        self.keyboardFrameTrackerView.setHeight(self.messageInputView.frame.height)
    }
    
    func setupTapRecognizer() {
        sendImageView.isUserInteractionEnabled = true
        let singleTap: UITapGestureRecognizer = UITapGestureRecognizer(target: self, action: #selector(onTapSend(_:)))
        singleTap.numberOfTapsRequired = 1
        sendImageView.addGestureRecognizer(singleTap)
    }
    
    func setupTable() {
        mainTable.contentInset = UIEdgeInsets(top: 4, left: 0, bottom: 0, right: 0)
        mainTable.delegate = self
        mainTable.dataSource = self
        mainTable.register(UINib(nibName: "InMessageCell", bundle: nil), forCellReuseIdentifier: "InMessageCell")
        mainTable.register(UINib(nibName: "OutMessageCell", bundle: nil), forCellReuseIdentifier: "OutMessageCell")
        mainTable.keyboardDismissMode = .interactive
        mainTable.transform = CGAffineTransform(a: 1, b: 0, c: 0, d: -1, tx: 0, ty: 0)
    }
    
    func reload() {
        mainTable.reloadData()
    }
    
    func clearTextView() {
        reloadInputViews()
        inputField.text = nil
        inputField.placeholder = "Сообщение"
        reloadInputViews()
    }

    func setupInputComponents() {
        inputField.setRounded()
        inputField.backgroundColor = .toasterLightGray
        inputField.setupBorder(width: 0.5, color: .toasterMetal)
        inputField.contentInset = UIEdgeInsets(top: 5, left: 8, bottom: 3, right: 8)
        attachImageView.image = UIImage(named: "attach")?.withRenderingMode(.alwaysTemplate)
        sendImageView.image = UIImage(named: "send")
        attachImageView.tintColor = .toasterMetal
        toolbarLabel.text = DialogViewController.user.name
    }
    
    func getToast(message: String, _ style: ToastStyle) {
        self.showToast(message: message, style, duration: 1)
    }
    
    @objc func onTapSend(_ sender: Any) {
        presenter?.onSend(message: inputField.text, peerId: DialogViewController.user.id)
    }
    
    @IBAction func back(_ sender: Any) {
        self.navigationController?.popViewController(animated: true)
    }
}
extension DialogViewController: UITableViewDataSource, UITableViewDelegate {
    func tableView(_ tableView: UITableView, numberOfRowsInSection section: Int) -> Int {
        guard presenter != nil else { return 0 }
        switch DialogViewController.user.online {
        case 0:
            statusLabel.text = "\(FriendsLocalization.getLastSeen(sex: DialogViewController.user.sex, time: DialogViewController.user.lastSeen.parseTime)) \(setOnlinePlatform(platform: DialogViewController.user.lastSeen.platform)) | \(presenter!.getAllMessagesCount()) ✉️"
        case 1:
            statusLabel.text = "Онлайн \(setOnlinePlatform(platform: DialogViewController.user.lastSeen.platform)) | \(presenter!.getAllMessagesCount()) ✉️"
        default: break
        }
        return presenter!.getMessagesCount()
    }
    
    func tableView(_ tableView: UITableView, cellForRowAt indexPath: IndexPath) -> UITableViewCell {
        guard presenter != nil else { return UITableViewCell() }
        if presenter!.getDialogMessage(indexPath: indexPath).out == 1 {
            let cell = tableView.dequeueReusableCell(withIdentifier: "InMessageCell", for: indexPath) as! InMessageCell
            cell.transform = CGAffineTransform(a: 1, b: 0, c: 0, d: -1, tx: 0, ty: 0)
            cell.setupCell(dialogMessageModel: presenter!.getDialogMessage(indexPath: indexPath))
            return cell
        } else {
            let cell = tableView.dequeueReusableCell(withIdentifier: "OutMessageCell", for: indexPath) as! OutMessageCell
            cell.transform = CGAffineTransform(a: 1, b: 0, c: 0, d: -1, tx: 0, ty: 0)
            cell.setupCell(dialogMessageModel: presenter!.getDialogMessage(indexPath: indexPath), user: DialogViewController.user)
            return cell
        }
    }
    
    func numberOfSections(in tableView: UITableView) -> Int {
        return 1
    }
}
extension DialogViewController: UIGestureRecognizerDelegate {
    func gestureRecognizerShouldBegin(_ gestureRecognizer: UIGestureRecognizer) -> Bool {
        guard gestureRecognizer != navigationController?.interactivePopGestureRecognizer else {
            return true
        }
        return false
    }
}
extension DialogViewController: KeyboardFrameTrackerDelegate {
    func keyboardFrameDidChange(with frame: CGRect) {
        let bottomSapcing = self.view.frame.height - frame.origin.y - self.keyboardFrameTrackerView.frame.height
        
        print("Keyboard frame: ", bottomSapcing)
        
        self.inputBottomConstraint.constant = bottomSapcing > 0 ? -bottomSapcing : 0
        self.view.layoutIfNeeded()
    }
}
